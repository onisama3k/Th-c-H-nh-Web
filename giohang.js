// ===== HI·ªÇN TH·ªä GI·ªé H√ÄNG =====
function renderCart() {
  const cart = JSON.parse(localStorage.getItem("cart")) || [];
  const list = document.getElementById("cart-list");
  const totalEl = document.getElementById("cart-total");
  list.innerHTML = "";
  let total = 0;

  if (cart.length === 0) {
    list.innerHTML = "<p>üõí Gi·ªè h√†ng c·ªßa b·∫°n ƒëang tr·ªëng.</p>";
    totalEl.textContent = "0 ‚Ç´";
    return;
  }

  cart.forEach((item, index) => {
    // ‚úÖ √âp gi√° v·ªÅ d·∫°ng s·ªë
    const priceNum = typeof item.price === "number"
      ? item.price
      : parseFloat(String(item.price).replace(/[^\d]/g, "")) || 0;

    const itemTotal = priceNum * (item.quantity || 1);
    total += itemTotal;

    list.innerHTML += `
      <div class="row align-items-center py-3 border-bottom">
        <div class="col-6 d-flex align-items-center">
          <img src="${item.img}" alt="${item.name}" style="width:80px;height:auto;margin-right:15px;">
          <div>
            <p class="mb-1 font-weight-bold">${item.name}</p>
            <span class="text-danger font-weight-bold">${priceNum.toLocaleString()} ‚Ç´</span>
            <div class="mt-2">
              <a href="#" class="text-dark" onclick="removeItem(${index})">
                <i class="fa-solid fa-xmark"></i> X√≥a
              </a>
            </div>
          </div>
        </div>
        <div class="col-2 text-center text-danger font-weight-bold">${priceNum.toLocaleString()} ‚Ç´</div>
        <div class="col-2 text-center">
          <select class="form-control w-50 m-auto" onchange="updateQuantity(${index}, this.value)">
            ${[1, 2, 3, 4, 5].map(n => `<option ${n === item.quantity ? 'selected' : ''}>${n}</option>`).join("")}
          </select>
        </div>
        <div class="col-2 text-center text-danger font-weight-bold">${itemTotal.toLocaleString()} ‚Ç´</div>
      </div>
    `;
  });

  totalEl.textContent = total.toLocaleString() + " ‚Ç´";
}

// ===== XO√Å S·∫¢N PH·∫®M =====
function removeItem(index) {
  const cart = JSON.parse(localStorage.getItem("cart")) || [];
  cart.splice(index, 1);
  localStorage.setItem("cart", JSON.stringify(cart));
  renderCart();
}

// ===== C·∫¨P NH·∫¨T S·ªê L∆Ø·ª¢NG =====
function updateQuantity(index, quantity) {
  const cart = JSON.parse(localStorage.getItem("cart")) || [];
  cart[index].quantity = Number(quantity);
  localStorage.setItem("cart", JSON.stringify(cart));
  renderCart();
}

// ====== TH√äM S·∫¢N PH·∫®M V√ÄO GI·ªé ======
// ====== TH√äM S·∫¢N PH·∫®M V√ÄO GI·ªé ======
document.addEventListener("click", (e) => {
  // D√πng event delegation ƒë·ªÉ b·∫Øt c·∫£ c√°c n√∫t th√™m ƒë∆∞·ª£c sinh ra sau n√†y
  if (e.target.closest(".btn-2")) {
    const btn = e.target.closest(".btn-2");
    const item = btn.closest(".item");
    if (!item) return;

    const name = item.querySelector("p").innerText.trim();
    const img = item.querySelector("img").src;
    const priceText = item.querySelector("h4").innerText.split(" ")[0];
    const price = parseFloat(priceText.replace(/[^\d]/g, "")) || 0;

    let cart = JSON.parse(localStorage.getItem("cart")) || [];

    const existing = cart.find((p) => p.name === name);
    if (existing) {
      existing.quantity += 1;
    } else {
      cart.push({ name, price, img, quantity: 1 });
    }

    localStorage.setItem("cart", JSON.stringify(cart));
  }
});


  renderCart(); // load gi·ªè h√†ng khi trang m·ªü


// ====== C·∫¨P NH·∫¨T T·ª∞ ƒê·ªòNG ======
window.addEventListener("storage", renderCart);
document.addEventListener("visibilitychange", () => {
  if (!document.hidden) renderCart();
});
